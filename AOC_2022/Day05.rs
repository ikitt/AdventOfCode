// use std::cmp;
use std::collections::HashMap;

fn main() {
    println!("Hello, world!");
    let mut crate_state: HashMap<i32, Vec<char>> = HashMap::new();
    
    // Get Initial state
    for line in INPUT_INIT
    {
        for char_idx in 0..line.len()
        {
            if line.chars().nth(char_idx).unwrap() == ' '
            {
                continue;
            }
            if crate_state.keys().any(|&x| x == (char_idx + 1) as i32)
            {
                crate_state.get_mut(&((char_idx + 1) as i32)).unwrap().push(line.chars().nth(char_idx).unwrap());
                // println!("Got it");
            }
            else
            {
                crate_state.insert((char_idx + 1) as i32, vec!(line.chars().nth(char_idx).unwrap()));
                // println!("First in pile {} is {}", char_idx + 1, line.chars().nth(char_idx).unwrap());
            }
        }
    }
    
    // //part 1
    // for line in INPUT_ISTRU
    // {
    //     // print(&crate_state);
    //     let mut line_str: String = String::from(line);
    //     let mut istru: (i32, i32, i32) = (0,0,0);
    //     istru.0 = line_str.split(' ').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();
    //     istru.1 = line_str.split(' ').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();
    //     istru.2 = line_str.split(' ').collect::<Vec<&str>>()[2].parse::<i32>().unwrap();
        
    //     let mut moving_crates: Vec<char>= vec!();
    //     for cpt in 0..istru.0
    //     {
    //         moving_crates.push(crate_state.get_mut(&(istru.1)).unwrap().pop().unwrap());
    //         crate_state.get_mut(&(istru.2)).unwrap().push(moving_crates.pop().unwrap());
    //     }
        
    // }
    
    //part 2
    for line in INPUT_ISTRU
    {
        // print(&crate_state);
        let mut line_str: String = String::from(line);
        let mut istru: (i32, i32, i32) = (0,0,0);
        istru.0 = line_str.split(' ').collect::<Vec<&str>>()[0].parse::<i32>().unwrap();
        istru.1 = line_str.split(' ').collect::<Vec<&str>>()[1].parse::<i32>().unwrap();
        istru.2 = line_str.split(' ').collect::<Vec<&str>>()[2].parse::<i32>().unwrap();
        
        let mut moving_crates: Vec<char>= vec!();
        for cpt in 0..istru.0
        {
            moving_crates.push(crate_state.get_mut(&(istru.1)).unwrap().pop().unwrap());
        }
        for cpt in 0..istru.0
        {
            crate_state.get_mut(&(istru.2)).unwrap().push(moving_crates.pop().unwrap());
        }
        
    }
    print!("Day3Part1: ");
    for key in 1..10
    {
        print!("{}", crate_state.get(&(key)).unwrap().last().unwrap());
    }
    println!("");
    print(&crate_state);
}

fn print(crate_state: &HashMap<i32, Vec<char>>) -> () {
    for key in 1..10//crate_state.keys()
    {
        println!("");
        println!("###################################");
        print!("Line {}: ",&key);
        for crat in crate_state.get(&key).unwrap()
        {
            print!("{}", crat);
        }
    }
}



// const INPUT_INIT: [&str; 3] = [
// "ZMP",
// "NC ", 
// " D " 
// ];

// // Incorrect QLFQDBBHM
// const INPUT_ISTRU: [&str; 4] = [
// "1 2 1",
// "3 1 3",
// "2 2 1",
// "1 1 2"
// ];




const INPUT_INIT: [&str; 8] = [
"DHLNNMDDB",
"TRQBDDBNN",
"WPVSFBQJH",
"FQ WTVJVM",
"JT RVH RS",
"SN QMT Z ",
"HB  BR H ",
"NG     Q "
];

// Incorrect QLFQDBBHM
// Part 1 ok GRTSWNJHH  
const INPUT_ISTRU: [&str; 502] = [
"3 1 2",
"1 7 1",
"1 6 5",
"5 5 9",
"2 5 2",
"1 6 8",
"1 5 7",
"5 4 6",
"1 7 6",
"1 2 4",
"5 2 6",
"2 1 5",
"2 1 9",
"16 6 4",
"6 8 3",
"7 2 4",
"5 9 3",
"1 1 4",
"1 1 3",
"3 7 4",
"2 5 4",
"31 4 8",
"22 8 4",
"9 3 6",
"7 9 5",
"4 5 6",
"6 3 2",
"2 6 7",
"5 2 7",
"1 2 4",
"1 7 5",
"4 5 4",
"2 6 9",
"2 4 6",
"7 6 4",
"2 6 1",
"1 6 8",
"8 8 1",
"1 7 6",
"4 1 5",
"9 4 8",
"4 1 7",
"3 5 3",
"2 1 9",
"1 3 2",
"1 9 8",
"1 2 1",
"1 1 8",
"1 5 1",
"2 3 1",
"2 6 9",
"19 4 1",
"4 4 2",
"6 1 4",
"1 2 4",
"4 4 3",
"7 7 3",
"7 8 2",
"2 7 4",
"3 2 1",
"8 8 2",
"3 9 1",
"2 9 1",
"10 2 7",
"4 3 1",
"1 8 3",
"1 4 5",
"1 3 6",
"1 2 1",
"10 1 3",
"1 4 7",
"1 6 4",
"7 3 2",
"5 2 8",
"11 7 2",
"3 4 3",
"1 4 3",
"5 8 9",
"17 2 4",
"11 1 5",
"4 1 3",
"5 9 2",
"4 2 1",
"3 5 7",
"6 5 3",
"1 5 8",
"6 1 8",
"3 8 5",
"1 1 4",
"1 7 2",
"15 3 4",
"1 1 3",
"10 3 9",
"2 7 4",
"1 2 8",
"21 4 9",
"1 2 3",
"1 8 1",
"9 4 2",
"1 1 5",
"5 2 7",
"2 8 5",
"1 8 1",
"2 2 8",
"2 4 9",
"24 9 5",
"3 4 1",
"2 2 5",
"12 5 1",
"10 1 5",
"23 5 6",
"8 9 1",
"3 8 1",
"1 1 2",
"1 3 7",
"11 6 1",
"1 2 4",
"6 6 8",
"4 6 7",
"1 7 3",
"1 3 4",
"23 1 8",
"1 4 2",
"1 2 1",
"1 6 7",
"6 5 3",
"1 7 8",
"1 1 8",
"1 9 3",
"6 7 2",
"3 5 9",
"5 2 3",
"28 8 3",
"4 1 9",
"5 9 5",
"2 8 5",
"1 9 4",
"2 7 5",
"1 4 2",
"1 4 8",
"2 8 3",
"6 5 2",
"1 7 2",
"39 3 2",
"2 3 8",
"1 9 6",
"2 2 9",
"2 9 6",
"1 8 1",
"1 1 6",
"5 6 9",
"2 5 8",
"20 2 4",
"2 4 8",
"2 8 3",
"3 3 1",
"22 2 5",
"2 9 1",
"3 1 7",
"1 2 6",
"1 2 9",
"1 1 8",
"2 7 9",
"1 6 8",
"1 2 7",
"1 1 3",
"1 9 8",
"1 8 5",
"3 8 7",
"3 7 8",
"15 4 1",
"1 4 3",
"10 1 6",
"3 8 1",
"5 9 4",
"7 5 1",
"4 6 3",
"15 5 2",
"4 6 4",
"7 2 1",
"6 4 6",
"1 5 9",
"1 5 7",
"1 3 5",
"11 1 8",
"3 4 6",
"4 1 5",
"1 2 5",
"2 8 3",
"11 6 1",
"1 3 7",
"1 9 8",
"6 5 8",
"3 8 4",
"1 4 5",
"3 3 1",
"9 8 2",
"2 1 5",
"11 2 5",
"1 3 6",
"2 8 5",
"3 4 6",
"1 8 3",
"2 1 9",
"1 3 8",
"16 5 7",
"3 1 6",
"1 3 5",
"1 6 7",
"1 9 4",
"1 5 4",
"1 3 2",
"1 1 2",
"3 4 9",
"1 2 7",
"2 8 3",
"6 2 8",
"11 1 3",
"6 3 1",
"4 3 2",
"2 3 1",
"1 1 3",
"4 8 4",
"4 8 2",
"11 7 2",
"9 7 5",
"1 7 3",
"4 5 7",
"14 2 3",
"17 3 7",
"2 5 2",
"1 5 7",
"1 5 6",
"4 6 7",
"8 1 2",
"2 6 4",
"1 6 8",
"6 4 1",
"1 8 5",
"6 7 8",
"5 8 3",
"12 2 1",
"1 8 4",
"4 3 1",
"4 2 4",
"3 9 3",
"3 3 2",
"1 3 2",
"3 4 1",
"2 5 7",
"22 1 8",
"17 8 6",
"21 7 6",
"3 2 8",
"3 1 5",
"3 5 2",
"2 4 6",
"7 6 5",
"1 9 4",
"14 6 4",
"5 8 3",
"1 6 3",
"3 3 9",
"2 9 1",
"2 7 1",
"16 6 8",
"2 6 7",
"1 2 7",
"1 3 8",
"7 4 1",
"2 7 2",
"4 4 7",
"5 2 4",
"1 7 3",
"3 5 8",
"1 7 5",
"12 1 6",
"3 7 2",
"7 4 2",
"3 3 2",
"1 4 2",
"1 9 8",
"8 6 8",
"12 2 4",
"5 5 2",
"11 4 9",
"3 6 3",
"2 4 2",
"4 2 6",
"5 2 8",
"12 8 4",
"20 8 5",
"13 5 3",
"1 8 5",
"5 5 9",
"16 9 1",
"9 4 5",
"12 3 9",
"5 6 5",
"9 9 7",
"14 1 4",
"14 4 1",
"15 5 7",
"4 8 2",
"3 4 3",
"3 1 8",
"1 5 9",
"1 5 3",
"3 9 8",
"4 3 4",
"1 4 6",
"20 7 2",
"2 3 8",
"3 7 2",
"4 2 1",
"1 6 7",
"3 4 2",
"2 2 3",
"4 3 4",
"1 8 1",
"3 8 1",
"2 7 8",
"1 4 5",
"14 2 5",
"6 1 5",
"1 4 3",
"15 1 4",
"1 8 2",
"1 9 5",
"4 8 7",
"13 5 6",
"1 8 1",
"2 7 9",
"12 6 4",
"1 3 6",
"1 1 6",
"4 5 2",
"5 5 6",
"2 6 2",
"1 7 5",
"2 6 9",
"1 5 9",
"16 2 5",
"17 4 1",
"3 1 3",
"1 2 6",
"2 6 1",
"3 3 1",
"14 1 8",
"3 5 2",
"4 8 2",
"3 4 5",
"15 5 3",
"1 7 6",
"3 1 8",
"2 3 7",
"1 1 2",
"1 7 6",
"4 2 8",
"2 6 2",
"1 7 6",
"3 8 2",
"12 8 6",
"1 5 6",
"3 2 5",
"2 2 5",
"4 6 5",
"4 3 5",
"1 8 4",
"11 6 4",
"6 3 1",
"2 9 8",
"20 4 5",
"1 4 9",
"2 3 8",
"1 3 8",
"17 5 8",
"5 5 9",
"9 5 1",
"2 6 7",
"23 8 2",
"2 7 5",
"3 9 4",
"16 2 4",
"11 1 8",
"4 5 8",
"11 2 6",
"2 6 1",
"5 9 5",
"5 5 6",
"5 8 6",
"1 6 7",
"7 8 1",
"12 1 2",
"1 9 5",
"1 1 3",
"1 1 4",
"1 5 3",
"1 3 6",
"1 8 2",
"18 6 2",
"1 6 2",
"2 8 3",
"3 3 8",
"18 4 9",
"11 9 2",
"2 9 6",
"2 4 1",
"1 1 5",
"1 5 4",
"1 4 8",
"42 2 1",
"3 9 3",
"1 8 1",
"1 3 4",
"3 8 7",
"1 4 1",
"2 3 2",
"17 1 6",
"15 6 3",
"2 9 7",
"1 3 6",
"2 7 6",
"2 2 4",
"1 2 3",
"1 4 9",
"1 4 1",
"1 6 3",
"20 1 9",
"6 1 9",
"7 9 3",
"20 9 1",
"1 6 7",
"2 6 7",
"1 6 5",
"1 6 8",
"4 7 3",
"3 7 2",
"1 6 4",
"1 2 1",
"1 4 9",
"21 3 2",
"5 3 8",
"1 5 1",
"2 8 7",
"4 8 3",
"4 2 5",
"19 2 3",
"1 9 2",
"23 3 2",
"2 7 4",
"3 5 9",
"16 2 1",
"1 5 4",
"1 9 3",
"2 3 8",
"3 4 6",
"1 6 2",
"1 8 6",
"5 2 6",
"7 6 5",
"4 2 6",
"6 5 9",
"1 8 4",
"18 1 9",
"1 5 2",
"9 9 4",
"5 6 3",
"9 4 1",
"4 9 2",
"1 4 8",
"1 8 3",
"7 1 8",
"6 3 2",
"10 2 9",
"21 1 8",
"1 2 8",
"19 8 4",
"1 8 3",
"16 4 8",
"1 4 2",
"2 1 5",
"1 2 3",
"1 4 5",
"1 4 8",
"2 1 3",
"3 3 2",
"5 9 1",
"1 3 4",
"4 9 4",
"2 1 9",
"2 2 5",
"1 2 7",
"3 1 7",
"10 8 6",
"4 8 5",
"3 4 3",
"3 3 4",
"1 9 8",
"2 7 2",
"1 2 1",
"4 9 3"
];
